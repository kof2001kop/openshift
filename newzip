	public static void compressEpub(String filesPath, String tartetZipFile)
	{
        File file = new File(filesPath);
        ArrayList<String> fileALS = new ArrayList<String>();
        ArrayList<String> zipFiles = new ArrayList<String>();

        for (File f : file.listFiles())
        {
        	if (f.isDirectory())
        	{
        		try
				{
					zipFolder(f.getAbsolutePath(), filesPath + f.getName() + ".zip");
				} catch (Exception e)
				{
					// TODO 自动生成的 catch 块
					e.printStackTrace();
				}
        	}
        	else if (!f.getName().contains("zip"))
        		fileALS.add(f.getAbsolutePath());
        }
        
        createZipFile(fileALS, filesPath + "others.zip");
        
        for (File f : file.listFiles())
        {
        	if (f.getName().contains("zip"))
        		zipFiles.add(f.getAbsolutePath());
        }
        Marge(tartetZipFile, zipFiles);
	}
	
	
	public static String createZipFile(ArrayList<String> fileList, String zipFileName) {

        if(fileList == null || fileList.size() == 0){
            return null;
        }
        
        //构建压缩文件File
        File zipFile = new File(zipFileName);
        //初期化ZIP流
        ZipOutputStream out = null;

        try{
            //构建ZIP流对象
            out = new ZipOutputStream(new FileOutputStream(zipFile));
            //循环处理传过来的集合
            for(int i = 0; i < fileList.size(); i++){
                //获取目标文件
                File inFile = new File(fileList.get(i));
                if(inFile.exists()){
                     //定义ZipEntry对象
                     ZipEntry entry = new ZipEntry(inFile.getName());
                     //赋予ZIP流对象属性
                     out.putNextEntry(entry);
                     int len = 0 ;
                     //缓冲
                     byte[] buffer = new byte[1024];
                     //构建FileInputStream流对象
                     FileInputStream fis;
                     fis = new FileInputStream(inFile);
                     while ((len = fis.read(buffer)) > 0) {
                         out.write(buffer, 0, len);
                         out.flush();
                     }
                     //关闭closeEntry
                     out.closeEntry();
                     //关闭FileInputStream
                     fis.close();
                }
            }
        }catch (IOException e) {
            e.printStackTrace();
        }finally{
             try {
                 //最后关闭ZIP流
                 out.close();
             } catch (IOException e) {
                 e.printStackTrace();
             }
        }


        return zipFileName;

    }


	/**
     * 合并压缩文件
     * @param tartetZipFile
     * @param sourceZipFiles
     * @return
     */
    public static boolean Marge(String tartetZipFile, ArrayList<String> sourceZipFiles) {
        boolean flag = true;
        ZipOutputStream out = null;
        List<ZipInputStream> ins = new ArrayList<ZipInputStream>();
        try{
            out = new ZipOutputStream(new FileOutputStream(tartetZipFile));
            HashSet<String> names = new HashSet<String>();
            for(String sourceZipFile : sourceZipFiles){
                
                ZipFile zipFile = new ZipFile(sourceZipFile,Charset.forName("GBK"));
                ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(sourceZipFile));
                ins.add(zipInputStream);
                ZipEntry ze;
                Enumeration<? extends ZipEntry> enumeration = zipFile.entries();
                while(enumeration.hasMoreElements()){
                    ze = enumeration.nextElement();
                    if(ze.isDirectory()){
                        
                    }else {
                        if(names.contains(ze.getName())){
                            
                            continue;
                        }
                        
                        ZipEntry oze = new ZipEntry(ze.getName());
                        out.putNextEntry(oze);
                        if(ze.getSize()>0){
                            DataInputStream dis = new DataInputStream(zipFile.getInputStream(ze));
                            int len = 0;
                            byte[] bytes = new byte[1024];
                            while((len = dis.read(bytes))>0){
                                out.write(bytes,0,len);
                            }
                            out.closeEntry();
                            out.flush();
                        }
                        names.add(oze.getName());
                    }
                    
                }
                zipInputStream.closeEntry();
                flag = true;
            }
        }catch(Exception ex){
            ex.printStackTrace();
            flag = false;
        }
        finally {
            try{
                if(out != null){
                    out.close();
                }
            }catch(Exception ex){
                ex.printStackTrace();
            }
            try{
                for(ZipInputStream in : ins){
                    if(in != null){
                        in.close();
                    }
                }
            }catch(IOException ex){
                ex.printStackTrace();
            }
        }
        return flag;
    }

